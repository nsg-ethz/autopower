# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import api_pb2 as api__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class CMeasurementApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerClient = channel.unary_stream(
                '/autopapi.CMeasurementApi/registerClient',
                request_serializer=api__pb2.clientUid.SerializeToString,
                response_deserializer=api__pb2.srvRequest.FromString,
                _registered_method=True)
        self.putClientResponse = channel.unary_unary(
                '/autopapi.CMeasurementApi/putClientResponse',
                request_serializer=api__pb2.clientResponse.SerializeToString,
                response_deserializer=api__pb2.nothing.FromString,
                _registered_method=True)
        self.putMeasurementList = channel.stream_unary(
                '/autopapi.CMeasurementApi/putMeasurementList',
                request_serializer=api__pb2.msmtName.SerializeToString,
                response_deserializer=api__pb2.nothing.FromString,
                _registered_method=True)
        self.putMeasurement = channel.stream_unary(
                '/autopapi.CMeasurementApi/putMeasurement',
                request_serializer=api__pb2.msmtSample.SerializeToString,
                response_deserializer=api__pb2.nothing.FromString,
                _registered_method=True)
        self.getMsmtSttngsAndStart = channel.unary_unary(
                '/autopapi.CMeasurementApi/getMsmtSttngsAndStart',
                request_serializer=api__pb2.clientUid.SerializeToString,
                response_deserializer=api__pb2.msmtSettings.FromString,
                _registered_method=True)
        self.putStatusMsg = channel.unary_unary(
                '/autopapi.CMeasurementApi/putStatusMsg',
                request_serializer=api__pb2.cmMCode.SerializeToString,
                response_deserializer=api__pb2.nothing.FromString,
                _registered_method=True)
        self.getLoggedInClients = channel.unary_stream(
                '/autopapi.CMeasurementApi/getLoggedInClients',
                request_serializer=api__pb2.mgmtAuth.SerializeToString,
                response_deserializer=api__pb2.clientUid.FromString,
                _registered_method=True)
        self.getRegistrationStatus = channel.unary_unary(
                '/autopapi.CMeasurementApi/getRegistrationStatus',
                request_serializer=api__pb2.authClientUid.SerializeToString,
                response_deserializer=api__pb2.registrationStatus.FromString,
                _registered_method=True)
        self.setMsmtSttings = channel.unary_unary(
                '/autopapi.CMeasurementApi/setMsmtSttings',
                request_serializer=api__pb2.mgmtMsmtSettings.SerializeToString,
                response_deserializer=api__pb2.nothing.FromString,
                _registered_method=True)
        self.issueRequestToClient = channel.unary_unary(
                '/autopapi.CMeasurementApi/issueRequestToClient',
                request_serializer=api__pb2.mgmtRequest.SerializeToString,
                response_deserializer=api__pb2.clientResponse.FromString,
                _registered_method=True)
        self.getMessages = channel.unary_stream(
                '/autopapi.CMeasurementApi/getMessages',
                request_serializer=api__pb2.mgmtAuth.SerializeToString,
                response_deserializer=api__pb2.cmMCode.FromString,
                _registered_method=True)


class CMeasurementApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerClient(self, request, context):
        """/ -- autopower device calls -- ///

        registers on server and listens on stream for commands from server
        @returns command stream from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putClientResponse(self, request, context):
        """informs server of success/failure of a srvRequest
        @returns a clientResponse stream to some issued srvRequests
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putMeasurementList(self, request_iterator, context):
        """upload file list to server
        @param stream of all measurement names to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putMeasurement(self, request_iterator, context):
        """upload measurement/measurement samples to server
        @param msmtSample stream is the file content requested by the server initially
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMsmtSttngsAndStart(self, request, context):
        """gets all necessary data for measurement and then immediately starts the measurement
        @returns measurement settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def putStatusMsg(self, request, context):
        """informs remote server of local status or error
        @param the cmStatus informing the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLoggedInClients(self, request, context):
        """/ -- management calls for external CLI/plotter -- ///

        gets the list of currently registered clients - they may not be currenly connected
        @returns stream of client UIDs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRegistrationStatus(self, request, context):
        """gets if the client is registered at the server
        @returns status of registration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setMsmtSttings(self, request, context):
        """sets measurement settings of a client locally on the server but does not start a measurement yet
        @param measurement settings for a device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def issueRequestToClient(self, request, context):
        """request the server to relay a request to an autopower device
        @param a request from the server to the autopower device
        @returns a response of the client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMessages(self, request, context):
        """get status and error messages from server
        @returns stream of error/status messages from any client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CMeasurementApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerClient': grpc.unary_stream_rpc_method_handler(
                    servicer.registerClient,
                    request_deserializer=api__pb2.clientUid.FromString,
                    response_serializer=api__pb2.srvRequest.SerializeToString,
            ),
            'putClientResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.putClientResponse,
                    request_deserializer=api__pb2.clientResponse.FromString,
                    response_serializer=api__pb2.nothing.SerializeToString,
            ),
            'putMeasurementList': grpc.stream_unary_rpc_method_handler(
                    servicer.putMeasurementList,
                    request_deserializer=api__pb2.msmtName.FromString,
                    response_serializer=api__pb2.nothing.SerializeToString,
            ),
            'putMeasurement': grpc.stream_unary_rpc_method_handler(
                    servicer.putMeasurement,
                    request_deserializer=api__pb2.msmtSample.FromString,
                    response_serializer=api__pb2.nothing.SerializeToString,
            ),
            'getMsmtSttngsAndStart': grpc.unary_unary_rpc_method_handler(
                    servicer.getMsmtSttngsAndStart,
                    request_deserializer=api__pb2.clientUid.FromString,
                    response_serializer=api__pb2.msmtSettings.SerializeToString,
            ),
            'putStatusMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.putStatusMsg,
                    request_deserializer=api__pb2.cmMCode.FromString,
                    response_serializer=api__pb2.nothing.SerializeToString,
            ),
            'getLoggedInClients': grpc.unary_stream_rpc_method_handler(
                    servicer.getLoggedInClients,
                    request_deserializer=api__pb2.mgmtAuth.FromString,
                    response_serializer=api__pb2.clientUid.SerializeToString,
            ),
            'getRegistrationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getRegistrationStatus,
                    request_deserializer=api__pb2.authClientUid.FromString,
                    response_serializer=api__pb2.registrationStatus.SerializeToString,
            ),
            'setMsmtSttings': grpc.unary_unary_rpc_method_handler(
                    servicer.setMsmtSttings,
                    request_deserializer=api__pb2.mgmtMsmtSettings.FromString,
                    response_serializer=api__pb2.nothing.SerializeToString,
            ),
            'issueRequestToClient': grpc.unary_unary_rpc_method_handler(
                    servicer.issueRequestToClient,
                    request_deserializer=api__pb2.mgmtRequest.FromString,
                    response_serializer=api__pb2.clientResponse.SerializeToString,
            ),
            'getMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.getMessages,
                    request_deserializer=api__pb2.mgmtAuth.FromString,
                    response_serializer=api__pb2.cmMCode.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'autopapi.CMeasurementApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('autopapi.CMeasurementApi', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CMeasurementApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/autopapi.CMeasurementApi/registerClient',
            api__pb2.clientUid.SerializeToString,
            api__pb2.srvRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def putClientResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autopapi.CMeasurementApi/putClientResponse',
            api__pb2.clientResponse.SerializeToString,
            api__pb2.nothing.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def putMeasurementList(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/autopapi.CMeasurementApi/putMeasurementList',
            api__pb2.msmtName.SerializeToString,
            api__pb2.nothing.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def putMeasurement(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/autopapi.CMeasurementApi/putMeasurement',
            api__pb2.msmtSample.SerializeToString,
            api__pb2.nothing.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMsmtSttngsAndStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autopapi.CMeasurementApi/getMsmtSttngsAndStart',
            api__pb2.clientUid.SerializeToString,
            api__pb2.msmtSettings.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def putStatusMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autopapi.CMeasurementApi/putStatusMsg',
            api__pb2.cmMCode.SerializeToString,
            api__pb2.nothing.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLoggedInClients(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/autopapi.CMeasurementApi/getLoggedInClients',
            api__pb2.mgmtAuth.SerializeToString,
            api__pb2.clientUid.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getRegistrationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autopapi.CMeasurementApi/getRegistrationStatus',
            api__pb2.authClientUid.SerializeToString,
            api__pb2.registrationStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setMsmtSttings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autopapi.CMeasurementApi/setMsmtSttings',
            api__pb2.mgmtMsmtSettings.SerializeToString,
            api__pb2.nothing.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def issueRequestToClient(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/autopapi.CMeasurementApi/issueRequestToClient',
            api__pb2.mgmtRequest.SerializeToString,
            api__pb2.clientResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/autopapi.CMeasurementApi/getMessages',
            api__pb2.mgmtAuth.SerializeToString,
            api__pb2.cmMCode.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
